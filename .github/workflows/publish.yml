name: Publish Package to npmjs
on:
  workflow_dispatch:
  release:
    types: [created]

env:
  # Cairo dependency versions - update these to change versions
  GTK_BUNDLE_VERSION: "2.22.1-20101229"
  LIBJPEG_TURBO_VERSION: "3.0.1"

jobs:
  build:
    name: Build, lint, test on Node 20 and windows-latest and publish to NPM registry

    runs-on: windows-latest

    steps:
      - name: Cache gtk and libjpg downloads
        id: cache-cairo-deps
        uses: actions/cache@v4
        with:
          # Cache key includes the versions, so cache is invalidated on version change
          key: ${{ runner.os }}-cairo-deps-gtk-${{ env.GTK_BUNDLE_VERSION }}-libjpeg-${{ env.LIBJPEG_TURBO_VERSION }}
          path: |
            C:\libjpeg.exe
            C:\GTK

      - name: Download Cairo dependencies
        if: steps.cache-cairo-deps.outputs.cache-hit != 'true'
        run: |
          # Using HTTPS where possible
          $gtkUrl = "https://ftp.gnome.org/pub/GNOME/binaries/win64/gtk+/2.22/gtk+-bundle_${{ env.GTK_BUNDLE_VERSION }}_win64.zip"
          $libjpegUrl = "https://sourceforge.net/projects/libjpeg-turbo/files/3.0.1/libjpeg-turbo-3.0.1-vc64.exe/download"

          Write-Host "Downloading GTK bundle version ${{ env.GTK_BUNDLE_VERSION }}"
          Invoke-WebRequest $gtkUrl -OutFile "C:\gtk.zip" -MaximumRetryCount 3 -UserAgent NativeHost
          Expand-Archive C:\gtk.zip -DestinationPath "C:\GTK"

          Write-Host "Downloading libjpeg-turbo version ${{ env.LIBJPEG_TURBO_VERSION }}"
          Invoke-WebRequest $libjpegUrl -OutFile "C:\libjpeg.exe" -MaximumRetryCount 3 -UserAgent NativeHost

      - name: Install Cairo dependencies
        run: |
          C:\libjpeg.exe /S

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.3
        with:
          vs-version: "15.0"

      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Use Node 20
        uses: actions/setup-node@v6
        env:
          FORCE_COLOR: 0
        with:
          node-version: 20
          cache: "npm"

      - name: Get npm cache directory
        id: npm-cache-dir
        shell: bash
        run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}

      - uses: actions/cache@v4
        id: npm-cache # use this to check for `cache-hit` ==> if: steps.npm-cache.outputs.cache-hit != 'true'
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Test
        run: |
          npx vitest run --config src/vitest.config.ts --coverage --reporter=verbose 2>&1 | tee test-output.log
          echo "Process exited with code: ${PIPESTATUS[0]}"
        continue-on-error: true

      - name: Build
        run: npm run build

      - name: Publish
        uses: JS-DevTools/npm-publish@v4
        with:
          token: ${{ secrets.NPM_TOKEN }}
          strategy: all
